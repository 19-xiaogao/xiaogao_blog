{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport Styles from './index.module.scss';\nvar saveIntervalX = 0;\nvar saveIntervalY = 0;\n\nvar PuzzleVerify = function PuzzleVerify(props) {\n  var sliderBtn = useRef(null);\n  var sliderBar = useRef(null);\n  var puzzleBox = useRef(null);\n  var puzzleShow = useRef(null);\n  var puzzle_lost_box = useRef(null);\n  var verTips = useRef(null);\n\n  var _useState = useState(-130),\n      moveLeft = _useState[0],\n      setMoveLeft = _useState[1];\n\n  var _useState2 = useState(false),\n      verifyStatus = _useState2[0],\n      setVerifyStatus = _useState2[1];\n\n  var moveStart = 0;\n  useEffect(function () {\n    initBgCanvas();\n  }, []);\n\n  var startMove = function startMove(e) {\n    e = e || window.event;\n    moveStart = e.pageX || e.targetTouches[0].pageX;\n    addMouseMoveListener();\n  };\n\n  var moving = function moving(e) {\n    e = e || window.event;\n    var moveX = e.pageX || e.targetTouches[0].pageX; // 线的总长度\n\n    var sliderClientWidth = sliderBar.current.clientWidth; // 移动的距离\n\n    var moveDistance = moveX - moveStart; // btn 按钮移动的最大偏移量\n    //  0 > 移动的距离  >  总长度 - 按钮的宽度\n\n    if (moveDistance >= sliderClientWidth - 40 || moveDistance < 0) {\n      return;\n    } // 图片移动的最偏移量\n    // 0> (随机图片的x 位置 + 55 =  图片距离 左边的偏移量) + 移动的距离  > 总长度\n\n\n    if (saveIntervalX + 55 + moveDistance > sliderClientWidth) {\n      return;\n    }\n\n    setMoveLeft(moveLeft + moveDistance);\n    sliderBtn.current.style.transition = 'inherit';\n    puzzle_lost_box.current.style.transition = 'inherit';\n    sliderBtn.current.style.left = moveDistance + 'px';\n  };\n\n  var endMove = function endMove(e) {\n    var left = puzzle_lost_box.current.style.left.substr(0, 1);\n    verTips.current.style.bottom = '0px';\n\n    if (left == 0) {\n      setVerifyStatus(true);\n      props.verifyResponse(true);\n    } else {\n      setVerifyStatus(false);\n      props.verifyResponse(false);\n    }\n\n    removeMouseMoveListener();\n    setTimeout(function () {\n      sliderBtn.current.style.left = 0 + 'px';\n      sliderBtn.current.style.transition = 'left .5s';\n      puzzle_lost_box.current.style.transition = 'left .5s';\n      verTips.current.style.bottom = '-40px';\n      setMoveLeft(-130);\n    }, 500);\n  };\n\n  var random = function random(min, max) {\n    return Math.floor(Math.random() * (max - min));\n  };\n\n  var initBgCanvas = function initBgCanvas() {\n    var ctx = puzzleBox.current.getContext('2d');\n    saveIntervalX = random(0, 70); //  随机x位置\n\n    saveIntervalY = random(25, -25); //  随机y位置\n\n    var d = 55 / 3; // 绘制小方块 /3 \n\n    renderCanvas(puzzleBox.current, saveIntervalX, saveIntervalY, d);\n    renderCanvas(puzzleShow.current, saveIntervalX, saveIntervalY, d);\n    ctx.restore();\n  };\n\n  var renderCanvas = function renderCanvas(type, x, y, d) {\n    var canvas = type.getContext('2d');\n    canvas.clearRect(0, 0, 260, 160);\n    canvas.save();\n    canvas.translate(130, 80);\n\n    if (type.id === 'puzzle_box') {\n      canvas.globalCompositeOperation = \"xor\";\n      canvas.fillStyle = \"#fff\";\n    }\n\n    canvas.beginPath();\n    canvas.moveTo(x, y);\n    canvas.lineTo(x + d, y);\n    canvas.bezierCurveTo(x + d, y - d, x + 2 * d, y - d, x + 2 * d, y);\n    canvas.lineTo(x + 3 * d, y);\n    canvas.lineTo(x + 3 * d, y + d);\n    canvas.bezierCurveTo(x + 2 * d, y + d, x + 2 * d, y + 2 * d, x + 3 * d, y + 2 * d);\n    canvas.lineTo(x + 3 * d, y + 3 * d);\n    canvas.lineTo(x, y + 3 * d);\n    canvas.closePath();\n\n    if (type.id === 'puzzleShow') {\n      canvas.clip();\n      canvas.fill();\n    } else {\n      canvas.strokeStyle = \"rgba(0,0,0,0)\";\n      canvas.stroke();\n      canvas.fill();\n    }\n\n    canvas.restore();\n  };\n\n  var refresh = function refresh() {\n    initBgCanvas();\n  };\n\n  var addMouseMoveListener = function addMouseMoveListener() {\n    document.addEventListener(\"mousemove\", moving);\n    document.addEventListener(\"touchmove\", moving);\n    document.addEventListener(\"mouseup\", endMove);\n    document.addEventListener(\"touchend\", endMove);\n  };\n\n  var removeMouseMoveListener = function removeMouseMoveListener() {\n    document.removeEventListener(\"mousemove\", moving);\n    document.removeEventListener(\"touchmove\", moving);\n    document.removeEventListener(\"mouseup\", endMove);\n    document.removeEventListener(\"touchend\", endMove);\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: Styles.container,\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: Styles.header,\n      children: [/*#__PURE__*/_jsx(\"span\", {\n        className: Styles[\"char\"],\n        children: \"\\u62D6\\u52A8\\u4E0B\\u65B9\\u6ED1\\u5757\\u5B8C\\u6210\\u62FC\\u56FE\"\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: Styles.icon,\n        children: [/*#__PURE__*/_jsx(\"i\", {\n          className: \"iconfont icon-shuaxin\",\n          onClick: refresh\n        }), /*#__PURE__*/_jsx(\"i\", {\n          className: \"iconfont icon-close\",\n          onClick: function onClick() {\n            return props.close();\n          }\n        })]\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: Styles.verify,\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: Styles.negative,\n        children: [/*#__PURE__*/_jsx(\"img\", {\n          src: \"/image/bg.png\",\n          alt: \"\"\n        }), /*#__PURE__*/_jsx(\"canvas\", {\n          width: \"260\",\n          height: \"160\",\n          id: \"puzzle_box\",\n          ref: puzzleBox\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: Styles.puzzle_lost_box,\n        ref: puzzle_lost_box,\n        style: {\n          left: moveLeft + 'px'\n        },\n        children: /*#__PURE__*/_jsx(\"canvas\", {\n          width: \"260\",\n          height: \"160\",\n          id: \"puzzleShow\",\n          ref: puzzleShow\n        })\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: Styles.ver_tips,\n        ref: verTips,\n        children: [/*#__PURE__*/_jsx(\"i\", {\n          className: \"iconfont \".concat(verifyStatus ? 'icon-Success' : 'icon-x')\n        }), /*#__PURE__*/_jsx(\"span\", {\n          children: verifyStatus ? \"验证通过\" : '验证失败，请移动到正确位置！'\n        })]\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: Styles.slider,\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: Styles.bar,\n        id: \"sliderBar\",\n        ref: sliderBar\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: Styles.btn,\n        onMouseDown: startMove,\n        onTouchStart: startMove,\n        ref: sliderBtn,\n        id: \"sliderBtn\",\n        children: [/*#__PURE__*/_jsx(\"span\", {}), /*#__PURE__*/_jsx(\"span\", {}), /*#__PURE__*/_jsx(\"span\", {})]\n      })]\n    })]\n  });\n};\n\nexport default PuzzleVerify;","map":null,"metadata":{},"sourceType":"module"}